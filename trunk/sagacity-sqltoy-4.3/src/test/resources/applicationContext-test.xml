<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true" default-autowire="byName">
	<context:property-placeholder location="classpath:postgresql.properties"/>
	<!-- <context:property-placeholder location="classpath:oracle.properties" /> -->
	<!-- <context:property-placeholder location="classpath:oracle.properties" 
		/> -->

	<!-- 让Spring通过自动扫描来查询和管理Bean -->
	<context:component-scan base-package="org.sagacity.sqltoy" />
	<!-- 支持异步方法执行 -->
	<task:annotation-driven />
	<!-- 数据源的配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		name="dataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.connection.driver_class}" />
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />
		<property name="maxTotal" value="${jdbc.maxTotal}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="validationQuery" value="${jdbc.validationQuery}" /> -->
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandonedOnBorrow" value="true" />
		<!-- 闲置时间为5分钟 -->
		<!-- <property name="removeAbandonedTimeout" value="300" /> -->
		<!-- 等待超时时间为10分钟 -->
		<property name="maxWaitMillis" value="600000" />
		<!-- 代表每次检查链接的数量，建议设置和maxActive一样大 -->
		<property name="numTestsPerEvictionRun" value="${jdbc.numTestsPerEvictionRun}" />
		<!-- 设置的Evict线程的时间 -->
		<property name="timeBetweenEvictionRunsMillis" value="120000" />
		<!-- 空闲后多长时间被逐出连接池，20分钟 -->
		<property name="minEvictableIdleTimeMillis" value="600000" />

		<property name="connectionProperties"
			value="defaultRowPrefetch=${jdbc.fetch_size};defaultBatchValue=${jdbc.batch_size}" />
	</bean>

	<!-- translateCache基于ehcache实现 -->
	<bean id="translateCacheManager" name="translateCacheManager"
		class="org.sagacity.sqltoy.cache.impl.TranslateEhcacheManager">
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<!-- 配置辅助sql处理工具用于sql查询条件的处理 -->
	<bean id="sqlToyContext" name="sqlToyContext" class="org.sagacity.sqltoy.SqlToyContext"
		init-method="initialize">
		<!-- sharding策略配置 -->
		<!-- <property name="shardingStrategys"> <map> <entry key="dateHisTable"> 
			<bean class="org.sagacity.sqltoy.test.HistoryTableStrategys" init-method="initialize"/> 
			</entry> </map> </property> -->
		<property name="scriptLoader">
			<bean id="scriptLoader" name="scriptLoader"
				class="org.sagacity.sqltoy.config.SqlScriptLoader">
				<property name="resourcesDir" value="classpath:/org/sagacity/sqltoy/demo" />
				<!-- 针对不同数据库函数进行转换 -->
				<property name="functionConverts">
					<list>
						<value>org.sagacity.sqltoy.config.function.impl.SubStr</value>
						<value>org.sagacity.sqltoy.config.function.impl.Trim</value>
						<value>org.sagacity.sqltoy.config.function.impl.Instr</value>
						<value>org.sagacity.sqltoy.config.function.impl.Concat</value>
						<!-- <value>org.sagacity.sqltoy.config.function.impl.Now</value> -->
						<value>org.sagacity.sqltoy.config.function.impl.Nvl</value>
					</list>
				</property>
			</bean>
		</property>
		<property name="entityManager">
			<bean id="entityManager" name="entityManager"
				class="org.sagacity.sqltoy.config.EntityManager">
				<property name="packagesToScan">
					<list>
						<value>org.sagacity.sqltoy.demo.vo</value>
					</list>
				</property>
			</bean>
		</property>
		<property name="translateManager">
			<bean id="translateManager" name="translateManager"
				class="org.sagacity.sqltoy.config.TranslateManager">
				<property name="translateConfig" value="classpath:translate.xml" />
				<property name="translateCacheManager" ref="translateCacheManager" />
			</bean>
		</property>
		<property name="dialect" value="${sqltoy.dialect}" />
		<property name="batchSize" value="${sqltoy.batchSize}" />
		<property name="showSql" value="${sqltoy.showSql}" />
		<property name="debug" value="${sqltoy.debug}" />
	</bean>
	<bean id="sqlToyLazyDao" name="sqlToyLazyDao"
		class="org.sagacity.sqltoy.dao.impl.SqlToyLazyDaoImpl" />

	<bean id="sqlToyCRUDService" name="sqlToyCRUDService"
		class="org.sagacity.sqltoy.service.impl.SqlToyCRUDServiceImpl" />


	<!-- 事务处理的AOP配置 // -->
	<aop:config proxy-target-class="true">
		<aop:advisor
			pointcut="execution(* org.sagacity.sqltoy.demo..*ServiceImpl.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor
			pointcut="execution(* org.sagacity.sqltoy.service.impl.SqlToyCRUDServiceImpl.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	<!-- 事务管理器定义 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务AOP处理的方法和事务类型定义 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="load*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="query*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="list*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="search*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="find*" propagation="NOT_SUPPORTED" isolation="READ_UNCOMMITTED" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="reset*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="store*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="submit*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="publish*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="edit*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="change*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="batch*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="send*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="append*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="import*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="audit*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="refuse*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="reject*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="resume*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="write*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="process*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="execute*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="cancel*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="adjust*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="release*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="dispatch*" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="onAuthenticationSuccess" propagation="REQUIRED"
				rollback-for="Throwable" />
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- EhCache Manager -->
	<bean id="cacheManager" name="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
	</bean>

	<!-- 对查询方法缓存,将查询的结果放入缓存,下次查询时将直接从缓存中获取数据，避免数据库IO操作 -->
	<bean id="methodCacheInterceptorAdvice" class="org.sagacity.core.cache.aop.MethodCacheInterceptor" />
	<!-- 对修改操作删除对应的缓存，从而保证下一次查询从数据库中获取更新后的数据 -->
	<bean id="methodFlushInterceptorAdvice" class="org.sagacity.core.cache.aop.MethodFlushInterceptor" />
	<aop:config proxy-target-class="true">
		<!-- 对如数据字典查询方法进行缓存 -->
		<aop:advisor
			pointcut="execution(* org.sagacity.sqltoy.demo..*DictServiceImpl.getDictByType(..))||execution(* org.sagacity.sqltoy.demo..*DictServiceImpl.getDictCacheKeyValues(..))"
			advice-ref="methodCacheInterceptorAdvice" />
		<!-- 对数据字典修改删除方法将其对应的查询缓存清空 -->
		<aop:advisor
			pointcut="execution(* org.sagacity.sqltoy.demo..*DictServiceImpl.add(..))||execution(* org.sagacity.sqltoy.demo..*DictServiceImpl.update(..))"
			advice-ref="methodFlushInterceptorAdvice" />

	</aop:config>
</beans>